#!/bin/bash

#  https://mp.weixin.qq.com/s?__biz=MzAxMTkwODIyNA==&mid=2247493774&idx=1&sn=e04ced49c00a50399d4f2e6469a952c0&chksm=9bbb4d61acccc477c62876990e13502ba8e202a1df7c1ff6ce3cd8815c0604c957c99627b378&mpshare=1&scene=24&srcid=0621Obubredxfnruq8caaNxk&sharer_sharetime=1624267602449&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd
#二、初识sed的工作原理
# 前提：首先对于一个文本文件来说，它是由至上而下的一行或N行组成。

#1、当用sed命令对文本进行处理的时候，sed先读取对象的文本文件的第一行到模式空间中。

#2、当有内容进入“模式空间”时，sed的编辑命令对模式空间中的内容进行编辑操作（修改，替换，删除，追加，显示等等）

#3、模式空间中的内容编辑处理完成之后，sed把此内容通过标准输出（默认为显示器）打印出来，并删除模式空间中的内容。

#4、第一行处理结束。从新读取第二行的内容进行处理，直到最后一行。


#三、sed命令的基本语法
# sed OPTIONS… [SCRIPT] [INPUTFILE…]

# 常用的选项：

#  -n,–quiet: 不输出模式空间中的内容

#  -i: 直接编辑原文件，默认不对原文件进行操作

#  -e: 可以使用多个命令（脚本）进行操作

#  -f /path/from/sed_script: 从指定的文本中读取处理脚本

#  -r: 使用扩展正则表达式

#四、模式空间中的编辑操作

#1、地址定界：

#1）#：#为数字，指定要进行处理操作的行

#2）$：表示最后一行，多个文件进行操作的时候，为最后一个文件的最后一行

#3）/regexp/：表示能够被regexp匹配到的行

# regexp及基于正则表达式的匹配：关于正则表达式的请参考grep的基本用法详解中的【三、了解正则表达式】

#4）/regexp/I：匹配是忽略大小写

#5）\%regexp%: 任何能够被regexp匹配到的行，换用%（用其他字符也可以，如：#）为边界符号

#6）addr1,addr2：指定范围内的所有的行（范围选定）

#常用的以下几种表示方法：

#a）0，/regexp/：从起始行开始到第一次能够被regexp匹配到的行

#b）/regexp/,/regexp/：被模式匹配到的行内的所有的行

#c）#,#：#为数字，给定具体的行范围

#d）#,+N：#为数字，从#开始的行开始，向下N行的所有的行

#7）first~step：指定起始的位置及步长，例如：1~2表示1,3,5…

#2、常用的编辑命令：

#1）d：删除匹配到的行

#2）p：打印模式空间中的内容

#注意：sed默认情况下是把“模式空间”中的内容全部进行显示，p的意义在于把匹配到的行进行显示。

#所以其显示的结果是“默认的显示内容+p要显示的内容”。

#因此通常与-n选项一起使用，表示只显示匹配到的行。

#3）a \text：append,表示在匹配到的行之后追加内容

#4）i \text：insert,表示在匹配到的行之前追加内容

#5）c \text：change,表示吧匹配到的行和给定的文本进行交换

#6）s/regexp/replacement/flages：查找替换,把text替换为regexp匹配到的内容（其中/可以用其他字符代替，例如@）

#可能会用到的特殊replacemen（通常replacement为固定的字符窜）：

#\L：转换后面的内容第一个字母为小写字母

#\l：后面的内容全部转换成小写，直到遇到\E为止

#\U：转换后面的内容第一个字母为大写字母

#\u：后面的内容全部转换成大写，直到遇到\E为止

#\E：当以\L或\U开始的时候，\E意味着停止字符的转换

#详情请参考：sed的官方文档

#如果是replacement为变量时，用'$VAR'引用即可

#常用的flages：

#  g：全局替换，默认只替换第一个

#  i： 不区分大小写

#  p：如果成功替换则打印

#7）w /path/to/somefile：将匹配到的文件另存到指定的文件中

#8）r /path/from/somefile：将读取指定的文件内容到匹配的行处（如果指定文件为多行时，追加到匹配行之后）

#五、知识点练习

#1、显示文件中的偶数行：

#1）用first~step的方式来实现，把奇数行删除，自然显示的事偶数行
sed "1~2d" test.txt


#2）不输出默认的显示内容，用p指定显示偶数行
sed -n "2~2p" test.txt

#2、在含有“ftp”这个行的前面加上“#This is a command”
sed   '/junjie/i # This is a command' etcpasswd.txt

#4、把/etc/man.config文件所有不以#开头的行保存到/tmp/sed/man.txt的目录中
#其中多个脚本用-e来分别执行，其实用；也可以实现多个脚本的连接。例如：
sed -n -e '/^#/d; w ./etcpass.txt' etcpasswd.txt


#六、sed的知识扩展

#在sed的工作原理图中我们了解到，sed不仅存在模式空间，也存在一个保持空间（hold space)。顾名思义，保存空间是一段sed独有的内存空间片段，可以暂时存放一些数据。

#其中与“保持空间”相关的编辑命令有：

#  h：把模式空间中的内容覆盖到保存空间中的内容

#  H：把模式空间中的内容追加到保存空间中（加在原有内容之后）

#  g：把保持空间中的内容覆盖到模式空间中的内容

#  G：把保持空间中的内容追加到模式空间中（加在原有内容之后）

#  x：把模式空间中的内容和保持空间中的内容进行交换

#  d：删除模式空间中的内容

#  D：如果模式空间中的内容为多行时，删除模式空间中的第一行

#  n：读取匹配到的行的下一行到模式空间中（覆盖原内容）

#  N：读取匹配到的行的下一行到模式空间中（追加在原内容之后）

#  例如：显示偶数行的时候就可以这样实现：sed -n 'n;p' FILE

# 练习2、

#前提：/etc/services文件是记录了服务与端口号之间的映射关系

#1) 在此文件中选出21，22，25，53，80，443，8080的行并予以显示

# grep -E可以支持使用扩展正则表达式，所以可以使用|（或者）
cat /etc/services | grep -E  "[[:space:]](21|22|25|53|80|443|8080)/tcp"

# 2）要求把右边有#注释的行的注释信息追加到此行的上一行
cat /etc/services | grep -E  "[[:space:]](21|22|25|53|80|443|8080)/tcp" | sed -f command1.sed


# 3）删除右侧的注释行，并保留以#行开头的注释行,在script中追加s/[[:space:]]\+#.*//

# 4）服务与服务之间加入空白行,sed '/^#/!G;$d' 在非#开头的行之加入空白行，之后最后一行会多出一个空白行，用sed '$d'删除最后一行即可。
cat /etc/services | grep -E  "[[:space:]](21|22|25|53|80|443|8080)/tcp" | sed -f command1.sed | sed '/^#/!G;' | sed '$d'











sed 's/dog/cat/'  data1.txt

sleep 2
echo -e  "\n\n"


sed -e 's/brown/green/; s/dog/cat/' data1.txt
